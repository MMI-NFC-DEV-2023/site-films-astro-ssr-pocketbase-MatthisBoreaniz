---
import { Debug } from "astro:components";
import Layout from "../../../layouts/Layout.astro";
import {
  PersonnesNationaliteOptions,
  type PersonnesResponse,
} from "../../../pocketbase-typegen";
import { PersonnesProfessionOptions } from "../../../pocketbase-typegen";

export const prerender = false;

const id = Astro.params.id;

const pb = Astro.locals.pb;
const personne = id
  ? await pb.collection("personnes").getOne(id)
  : ({} as PersonnesResponse);
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const personne = await (id
    ? pb.collection("personnes").update(id!, data)
    : pb.collection("personnes").create(data));
  return Astro.redirect(`/personnes/${personne.id}-${personne.nom}`);
}

function formatDate(date: string) {
  return date ? new Date(date).toISOString().split("T")[0] : "";
}
---

<Layout pageTitle="edit personne">
  <Debug value={personne} />
  <h1>Edit de Personne</h1>
  <form class="*:contents grid grid-cols-2" method="post">
    <input type="hidden" name="id" value={personne.id} />
    <label>
      date de deces
      <input
        type="date"
        name="dateDeces"
        value={formatDate(personne.dateDeces)}
      />
    </label>
    <label>
      date de Naissance
      <input
        type="date"
        name="dateNaissance"
        value={formatDate(personne.dateNaissance)}
      />
    </label>
    <label>
      Lieu de décès
      <input type="text" name="lieuDeces" value={personne.lieuDeces} />
    </label>
    <label>
      Lieu de Naissance
      <input type="text" name="lieuNaissance" value={personne.lieuNaissance} />
    </label>
    <label>
      Nom
      <input type="text" name="nom" value={personne.nom} />
    </label>
    <label>
      Prenom
      <input type="text" name="prenom" value={personne.prenom} />
    </label>

    <label>
      nationalite
      <select name="nationalite">
        {
          Object.entries(PersonnesNationaliteOptions).map(([key, value]) => (
            <option selected={value === personne.nationalite} value={value}>
              {key}
            </option>
          ))
        }
      </select>
    </label>

    <label>
      Profession
      <select name="profession" multiple>
        {
          Object.entries(PersonnesProfessionOptions).map(([key, value]) => (
            <option
              selected={personne.profession?.includes(value)}
              value={value}
            >
              {key}
            </option>
          ))
        }
      </select>
      <button>Envoyer</button>
    </label>
  </form>
</Layout>
